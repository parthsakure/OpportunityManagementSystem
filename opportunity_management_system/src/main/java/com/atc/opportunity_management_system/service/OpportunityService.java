package com.atc.opportunity_management_system.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

// import com.atc.opportunity_management_system.entity.Company;
import com.atc.opportunity_management_system.entity.DealStage;
import com.atc.opportunity_management_system.entity.ErrorMessage;
import com.atc.opportunity_management_system.entity.Opportunity;
import com.atc.opportunity_management_system.entity.Transaction;
import com.atc.opportunity_management_system.entity.User;
import com.atc.opportunity_management_system.exception.OpportunityNotFoundException;
import com.atc.opportunity_management_system.repository.DealStageRepository;
import com.atc.opportunity_management_system.repository.OpportunityRepository;
import com.atc.opportunity_management_system.repository.TransactionRepository;
import com.atc.opportunity_management_system.repository.UserRepository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;

@Service
public class OpportunityService {

  @Autowired
  OpportunityRepository opportunityRepository;

  @Autowired
  UserRepository userRepository;

  @Autowired
  DealStageRepository dealStageRepository;

  @Autowired
  TransactionRepository transactionRepository;

  @Autowired
  EntityManager entityManager;


  //method to create a transaction record
  @Transactional
  private Transaction addTransactions(DealStage dealstage, Opportunity opportunity, User user)
  {
    Transaction transaction = new Transaction();

    //transactionId and timestamp is autogenerated
    transaction.setDealStage(dealstage);
    transaction.setOpportunity(opportunity);
    transaction.setUser(user);

    return transactionRepository.save(transaction);
  }

  //method to reward bbdbucks to user
  @Transactional
  private User addBbdBucks(User user, int rewardPrice)
  {
    user.setBbdBucks(user.getBbdBucks() + rewardPrice);
    return userRepository.save(user);
  }



  //method to update an opportunity
  @Transactional
  public Opportunity updateOpportunity(int opportunityid, Opportunity newOpportunity) throws Exception
  {

    Authentication loggedInUser = SecurityContextHolder.getContext().getAuthentication();
    boolean isAdmin = loggedInUser.getAuthorities().stream().anyMatch(auth->auth.getAuthority().equals("ROLE_ADMIN"));
    // System.out.println(isAdmin);
    // System.out.println("***********************************");

    //getting the existing opportunity
    Opportunity opportunitytoupdate = opportunityRepository.findById(opportunityid)
    .orElseThrow(() -> new OpportunityNotFoundException(opportunityid));
    
    //if Opportunity is not active
    if(!opportunitytoupdate.isActive()) throw new OpportunityNotFoundException(opportunityid);
    
    //if opportunity id in body & url doesn't match
    if(opportunityid != newOpportunity.getOpportunityId())throw new Exception("Opportunity Id should match");
    
    //if logged in user is not same as deal owner
    if(!isAdmin && !opportunitytoupdate.getDealOwner().getUsername().equals(loggedInUser.getName())) throw new Exception("You are not owner of this Opportunity.");

    // if deal stage is changed && request user is an admin
    if(isAdmin && opportunitytoupdate.getDealStage().getDealStageId() < newOpportunity.getDealStage().getDealStageId()){

      //identifying which user to give bbd bucks to
      User usertogetbbdbucks = userRepository.findById(newOpportunity.getDealOwner().getUserId()).get();

      //add to transactions table
      addTransactions(newOpportunity.getDealStage(), newOpportunity, usertogetbbdbucks);
      
      //adding the bucks according to deal stage
      addBbdBucks(usertogetbbdbucks, dealStageRepository.findById(newOpportunity.getDealStage().getDealStageId()).get().getRewardPrice());

    }

    //if updating user is not admin then 
    else
    {
      newOpportunity.setDealStage(opportunitytoupdate.getDealStage());
    }

    //updating the opportunity
    return opportunityRepository.save(newOpportunity);

  }


    //method to add a new opportunity
    @Transactional
    public Opportunity addOpportunity(Opportunity opportunity)
    {
      //set the deal stage to prospect by deafult
      opportunity.setDealStage(dealStageRepository.findByDealStage("Prospect").get());
      opportunity.setActive(true);

    //save opportunity
    opportunityRepository.save(opportunity);
    
    //get user who submitted opportunity
    User usertogetbbdbucks = userRepository.findById(opportunity.getDealOwner().getUserId()).get();
    
    //add to transactions table
    addTransactions(dealStageRepository.findByDealStage("Prospect").get(), opportunity, usertogetbbdbucks);
    
    //addbbdbucks to the user
    opportunity.setDealOwner(addBbdBucks(usertogetbbdbucks, dealStageRepository.findByDealStage("Prospect").get().getRewardPrice()));
    
    return opportunity;
  }


  //method to get a opportunity by id
  public ResponseEntity<Object> getOpportunityById(int id)
  {
    //find the opportunity
    Optional<Opportunity> opportunity = opportunityRepository.findById(id);

    if(!opportunity.isPresent())
    {
      return new ResponseEntity<Object>(new ErrorMessage("No opportunity with this ID",HttpStatus.NOT_FOUND.value()), HttpStatus.NOT_FOUND);
    }

    //return
    return ResponseEntity.ok(opportunity);
  }


  //in progress
  @Transactional
  public void deleteOpportunity(int Id , Opportunity closedReason)
  { 
      
      //get opportunity to delete
      Opportunity opportunity = opportunityRepository.findById(Id)
      .orElseThrow(() -> new OpportunityNotFoundException(Id));

      //set as inactive if it is active
      if(opportunity.isActive())
      {
          opportunity.setActive(false); 
          opportunity.setDealStage(dealStageRepository.findByDealStage("Closed Lost").get());  
          opportunity.setClosedLostReason(closedReason.getClosedLostReason());
          opportunityRepository.save(opportunity);
      }
  }

  //method to get active opportunities by user
  public ResponseEntity<Object> getOpportunitiesByUser()
  {

    //get user information
    User user = userRepository.findByUsername(SecurityContextHolder.getContext().getAuthentication().getName()).get();

    //show all opportunities for admins
    if (user.getRole().getRole().equals("ROLE_ADMIN"))
    {
      return ResponseEntity.ok(opportunityRepository.findAll());
    }

    //get the active opportunities for the user
    TypedQuery<Opportunity> query = entityManager.createQuery("Select o from Opportunity o where o.dealOwner =?1", Opportunity.class);
    query.setParameter(1, user);
    List<Opportunity> opportunities = query.getResultList();

    //if there are no opportunities
    if (opportunities.isEmpty())
    {
      System.out.println("error");
        return new ResponseEntity<Object>(new ErrorMessage("No opportunities for this user",HttpStatus.NOT_FOUND.value()), HttpStatus.NOT_FOUND);
    }

    //return
    return ResponseEntity.ok(opportunities);
    
  }



}
