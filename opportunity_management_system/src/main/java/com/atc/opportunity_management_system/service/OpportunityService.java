package com.atc.opportunity_management_system.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.atc.opportunity_management_system.entity.DealStage;
import com.atc.opportunity_management_system.entity.Opportunity;
import com.atc.opportunity_management_system.entity.Transaction;
import com.atc.opportunity_management_system.entity.User;
import com.atc.opportunity_management_system.exception.OpportunityNotFoundException;
import com.atc.opportunity_management_system.repository.DealStageRepository;
import com.atc.opportunity_management_system.repository.OpportunityRepository;
import com.atc.opportunity_management_system.repository.TransactionRepository;
import com.atc.opportunity_management_system.repository.UserRepository;

@Service
public class OpportunityService {

    @Autowired
    OpportunityRepository opportunityRepository;

    @Autowired
    UserRepository userrepository;

    @Autowired
    DealStageRepository dealStageRepository;

    @Autowired
    TransactionRepository transactionRepository;


    //method to create a transaction record
    private void addTransactions(DealStage dealstage, Opportunity opportunity, User user)
    {
      Transaction transaction = new Transaction();

      //transactionId and timestamp is autogenerated
      transaction.setDealStage(dealstage);
      transaction.setOpportunity(opportunity);
      transaction.setUser(user);

      transactionRepository.save(transaction);
    }

    //method to reward bbdbucks to user
    private void addBbdBucks(User user, int rewardPrice)
    {
      user.setBbdBucks(user.getBbdBucks() + rewardPrice);
      userrepository.save(user);
    }



    //method to update an opportunity
    public Opportunity updateOpportunity(int opportunityid, Opportunity newOpportunity)
    {
        //getting the existing opportunity
        Opportunity opportunitytoupdate = opportunityRepository.findById(opportunityid)
            .orElseThrow(() -> new OpportunityNotFoundException(opportunityid));
        

        //updating the opportunity
        if(opportunitytoupdate!= newOpportunity)
        {
          opportunitytoupdate.setTitle(newOpportunity.getTitle());
          opportunitytoupdate.setDescription(newOpportunity.getDescription());
          opportunitytoupdate.setPrimaryNeed(newOpportunity.getPrimaryNeed());
          opportunitytoupdate.setExpectedMonthlyRevenue(newOpportunity.getExpectedMonthlyRevenue());
          opportunitytoupdate.setExpectedLaunchDate(newOpportunity.getExpectedLaunchDate());
          opportunitytoupdate.setClosedLostReason(newOpportunity.getClosedLostReason());
          opportunitytoupdate.setDeliveryModel(newOpportunity.getDeliveryModel());
          opportunitytoupdate.setDealStage(newOpportunity.getDealStage());
          opportunitytoupdate.setDealOwner(newOpportunity.getDealOwner());

          opportunityRepository.save(opportunitytoupdate);
        }

        else{
          return opportunitytoupdate;
        }


        // if deal stage is changed
        if(opportunitytoupdate.getDealStage() != newOpportunity.getDealStage())
        {

          //identifying which user to give bbd bucks to
          User usertogetbbdbucks = opportunitytoupdate.getDealOwner();

          //add to transactions table
          addTransactions(newOpportunity.getDealStage(), opportunitytoupdate, usertogetbbdbucks);
          
          //adding the bucks according to deal stage
          addBbdBucks(usertogetbbdbucks, newOpportunity.getDealStage().getRewardPrice());

        }

        //return
        return opportunitytoupdate;
    }


    //method to add a new opportunity
    public String addOpportunity(Opportunity opportunity)
    {
      // //set the deal stage to prospect by deafult
      opportunity.setDealStage(dealStageRepository.findByDealStage("Prospect"));

      //save opportunity
      opportunity.setOpportunityId(0);
      opportunityRepository.save(opportunity);

      // //get user who submitted opportunity
      User usertogetbbdbucks = opportunity.getDealOwner();

      // //add to transactions table
      addTransactions(dealStageRepository.findByDealStage("Prospect"), opportunity, usertogetbbdbucks);

      // //addbbdbucks to the user
      addBbdBucks(usertogetbbdbucks, dealStageRepository.findByDealStage("Prospect").getRewardPrice());

      return "ok";
    }

}
