package com.atc.opportunity_management_system.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

// import com.atc.opportunity_management_system.entity.Company;
import com.atc.opportunity_management_system.entity.DealStage;
import com.atc.opportunity_management_system.entity.Opportunity;
import com.atc.opportunity_management_system.entity.Transaction;
import com.atc.opportunity_management_system.entity.User;
import com.atc.opportunity_management_system.exception.OpportunityNotFoundException;
import com.atc.opportunity_management_system.repository.DealStageRepository;
import com.atc.opportunity_management_system.repository.OpportunityRepository;
import com.atc.opportunity_management_system.repository.TransactionRepository;
import com.atc.opportunity_management_system.repository.UserRepository;

import jakarta.transaction.Transactional;

@Service
public class OpportunityService {

  @Autowired
  OpportunityRepository opportunityRepository;

  @Autowired
  UserRepository userrepository;

  @Autowired
  DealStageRepository dealStageRepository;

  @Autowired
  TransactionRepository transactionRepository;


  //method to create a transaction record
  @Transactional
  private Transaction addTransactions(DealStage dealstage, Opportunity opportunity, User user)
  {
    Transaction transaction = new Transaction();

    //transactionId and timestamp is autogenerated
    transaction.setDealStage(dealstage);
    transaction.setOpportunity(opportunity);
    transaction.setUser(user);

    return transactionRepository.save(transaction);
  }

  //method to reward bbdbucks to user
  @Transactional
  private User addBbdBucks(User user, int rewardPrice)
  {
    user.setBbdBucks(user.getBbdBucks() + rewardPrice);
    return userrepository.save(user);
  }



  //method to update an opportunity
  @Transactional
  public Opportunity updateOpportunity(int opportunityid, Opportunity newOpportunity) throws Exception
  {

    Authentication loggedInUser = SecurityContextHolder.getContext().getAuthentication();
    boolean isAdmin = loggedInUser.getAuthorities().stream().anyMatch(auth->auth.getAuthority().equals("ROLE_ADMIN"));
    // System.out.println(isAdmin);
    // System.out.println("***********************************");
    //getting the existing opportunity
    Opportunity opportunitytoupdate = opportunityRepository.findById(opportunityid)
    .orElseThrow(() -> new OpportunityNotFoundException(opportunityid));
    
    //if Opportunity is not active
    if(!opportunitytoupdate.isActive()) throw new OpportunityNotFoundException(opportunityid);
    
    //if opportunity id in body & url doesn't match
    if(opportunityid != newOpportunity.getOpportunityId())throw new Exception("Opportunity Id should match");
    
    //if logged in user is not same as deal owner
    if(!isAdmin && !opportunitytoupdate.getDealOwner().getUsername().equals(loggedInUser.getName())) throw new Exception("You are not owner of this Opportunity.");

    // if deal stage is changed && request user is an admin
    if(isAdmin && opportunitytoupdate.getDealStage().getDealStageId() < newOpportunity.getDealStage().getDealStageId()){

      //identifying which user to give bbd bucks to
      User usertogetbbdbucks = userrepository.findById(newOpportunity.getDealOwner().getUserId()).get();

      //add to transactions table
      addTransactions(newOpportunity.getDealStage(), newOpportunity, usertogetbbdbucks);
      
      //adding the bucks according to deal stage
      addBbdBucks(usertogetbbdbucks, dealStageRepository.findById(newOpportunity.getDealStage().getDealStageId()).get().getRewardPrice());

    }
    //if updating user is not admin then 
    else
    {
      newOpportunity.setDealStage(opportunitytoupdate.getDealStage());
    }

    //updating the opportunity
    return opportunityRepository.save(newOpportunity);

  }


    //method to add a new opportunity
    @Transactional
    public Opportunity addOpportunity(Opportunity opportunity)
    {
      //set the deal stage to prospect by deafult
      opportunity.setDealStage(dealStageRepository.findByDealStage("Prospect").get());
      opportunity.setActive(true);

      //save opportunity
      opportunityRepository.save(opportunity);
      
      //get user who submitted opportunity
      User usertogetbbdbucks = userrepository.findById(opportunity.getDealOwner().getUserId()).get();
      
      //add to transactions table
      addTransactions(dealStageRepository.findByDealStage("Prospect").get(), opportunity, usertogetbbdbucks);
      
      //addbbdbucks to the user
      opportunity.setDealOwner(addBbdBucks(usertogetbbdbucks, dealStageRepository.findByDealStage("Prospect").get().getRewardPrice()));
      
      return opportunity;
    }


    //method to get a opportunity by id
    public Opportunity getOpportunityById(int id)
    {
      //find the opportunity
      Opportunity opportunity = opportunityRepository.findById(id)
      .orElseThrow(() -> new OpportunityNotFoundException(id));

      //return
      return opportunity;
    }



    //in progress
    @Transactional
    public void deleteOpportunity(int Id , Opportunity closedReason)
    { 
        
        //get opportunity to delete
        Opportunity opportunity = opportunityRepository.findById(Id)
        .orElseThrow(() -> new OpportunityNotFoundException(Id));

        //set as inactive if it is active
        if(opportunity.isActive())
        {
            opportunity.setActive(false); 
            opportunity.setDealStage(dealStageRepository.findByDealStage("Closed Lost").get());  
            opportunity.setClosedLostReason(closedReason.getClosedLostReason());
            opportunityRepository.save(opportunity);
        }
    }

}
